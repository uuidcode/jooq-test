/*
 * This file is generated by jOOQ.
 */
package com.github.uuidcode.jooq.test.jooq.tables;


import com.github.uuidcode.jooq.test.jooq.Indexes;
import com.github.uuidcode.jooq.test.jooq.Keys;
import com.github.uuidcode.jooq.test.jooq.QJooq;
import com.github.uuidcode.jooq.test.jooq.tables.records.QUserRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class QUser extends TableImpl<QUserRecord> {

    private static final long serialVersionUID = -577939146;

    /**
     * The reference instance of <code>jooq.user</code>
     */
    public static final QUser USER = new QUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QUserRecord> getRecordType() {
        return QUserRecord.class;
    }

    /**
     * The column <code>jooq.user.user_id</code>.
     */
    public final TableField<QUserRecord, Long> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>jooq.user.name</code>.
     */
    public final TableField<QUserRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>jooq.user.reg_datetime</code>.
     */
    public final TableField<QUserRecord, Timestamp> REG_DATETIME = createField("reg_datetime", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * Create a <code>jooq.user</code> table reference
     */
    public QUser() {
        this(DSL.name("user"), null);
    }

    /**
     * Create an aliased <code>jooq.user</code> table reference
     */
    public QUser(String alias) {
        this(DSL.name(alias), USER);
    }

    /**
     * Create an aliased <code>jooq.user</code> table reference
     */
    public QUser(Name alias) {
        this(alias, USER);
    }

    private QUser(Name alias, Table<QUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private QUser(Name alias, Table<QUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return QJooq.JOOQ;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.USER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<QUserRecord, Long> getIdentity() {
        return Keys.IDENTITY_USER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<QUserRecord> getPrimaryKey() {
        return Keys.KEY_USER_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<QUserRecord>> getKeys() {
        return Arrays.<UniqueKey<QUserRecord>>asList(Keys.KEY_USER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public QUser as(String alias) {
        return new QUser(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public QUser as(Name alias) {
        return new QUser(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public QUser rename(String name) {
        return new QUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public QUser rename(Name name) {
        return new QUser(name, null);
    }
}
