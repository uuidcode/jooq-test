/*
 * This file is generated by jOOQ.
 */
package com.github.uuidcode.jooq.test.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import com.github.uuidcode.jooq.test.jooq.Indexes;
import com.github.uuidcode.jooq.test.jooq.Keys;
import com.github.uuidcode.jooq.test.jooq.QJooq;
import com.github.uuidcode.jooq.test.jooq.tables.records.QBookRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class QBook extends TableImpl<QBookRecord> {

    private static final long serialVersionUID = -609603360;

    /**
     * The reference instance of <code>jooq.book</code>
     */
    public static final QBook BOOK = new QBook();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QBookRecord> getRecordType() {
        return QBookRecord.class;
    }

    /**
     * The column <code>jooq.book.book_id</code>.
     */
    public final TableField<QBookRecord, Long> BOOK_ID = createField("book_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>jooq.book.name</code>.
     */
    public final TableField<QBookRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>jooq.book.user_id</code>.
     */
    public final TableField<QBookRecord, Long> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>jooq.book</code> table reference
     */
    public QBook() {
        this(DSL.name("book"), null);
    }

    /**
     * Create an aliased <code>jooq.book</code> table reference
     */
    public QBook(String alias) {
        this(DSL.name(alias), BOOK);
    }

    /**
     * Create an aliased <code>jooq.book</code> table reference
     */
    public QBook(Name alias) {
        this(alias, BOOK);
    }

    private QBook(Name alias, Table<QBookRecord> aliased) {
        this(alias, aliased, null);
    }

    private QBook(Name alias, Table<QBookRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return QJooq.JOOQ;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.BOOK_BOOK_IDX1, Indexes.BOOK_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<QBookRecord, Long> getIdentity() {
        return Keys.IDENTITY_BOOK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<QBookRecord> getPrimaryKey() {
        return Keys.KEY_BOOK_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<QBookRecord>> getKeys() {
        return Arrays.<UniqueKey<QBookRecord>>asList(Keys.KEY_BOOK_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public QBook as(String alias) {
        return new QBook(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public QBook as(Name alias) {
        return new QBook(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public QBook rename(String name) {
        return new QBook(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public QBook rename(Name name) {
        return new QBook(name, null);
    }
}
